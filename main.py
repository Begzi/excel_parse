

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\py\pyQt\kvitansia2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
import copy, datetime, os


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(558, 446)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(-1, 16, -1, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.formLayout_4 = QtWidgets.QFormLayout()
        self.formLayout_4.setContentsMargins(6, 16, -1, -1)
        self.formLayout_4.setHorizontalSpacing(9)
        self.formLayout_4.setObjectName("formLayout_4")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_5)
        self.classBox = QtWidgets.QComboBox(Form)
        self.classBox.setObjectName("classBox")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.classBox)
        self.verticalLayout_2.addLayout(self.formLayout_4)
        self.formLayout_5 = QtWidgets.QFormLayout()
        self.formLayout_5.setContentsMargins(6, 16, -1, -1)
        self.formLayout_5.setHorizontalSpacing(15)
        self.formLayout_5.setObjectName("formLayout_5")
        self.label = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.nameBox = QtWidgets.QComboBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nameBox.sizePolicy().hasHeightForWidth())
        self.nameBox.setSizePolicy(sizePolicy)
        self.nameBox.setObjectName("nameBox")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.nameBox)
        self.verticalLayout_2.addLayout(self.formLayout_5)
        self.formLayout_6 = QtWidgets.QFormLayout()
        self.formLayout_6.setContentsMargins(-1, 16, -1, -1)
        self.formLayout_6.setHorizontalSpacing(0)
        self.formLayout_6.setObjectName("formLayout_6")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_6)
        self.comboBox_2 = QtWidgets.QComboBox(Form)
        self.comboBox_2.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setFrame(False)
        self.comboBox_2.setObjectName("comboBox_2")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.comboBox_2)
        self.verticalLayout_2.addLayout(self.formLayout_6)
        self.nameView = QtWidgets.QListView(Form)
        self.nameView.setObjectName("nameView")
        self.verticalLayout_2.addWidget(self.nameView)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(-1, 16, -1, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setContentsMargins(6, 16, -1, -1)
        self.formLayout.setHorizontalSpacing(46)
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.serviceBox = QtWidgets.QComboBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.serviceBox.sizePolicy().hasHeightForWidth())
        self.serviceBox.setSizePolicy(sizePolicy)
        self.serviceBox.setObjectName("serviceBox")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.serviceBox)
        self.verticalLayout.addLayout(self.formLayout)
        self.formLayout_2 = QtWidgets.QFormLayout()
        self.formLayout_2.setContentsMargins(6, 16, -1, -1)
        self.formLayout_2.setHorizontalSpacing(16)
        self.formLayout_2.setObjectName("formLayout_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.dateFromBox = QtWidgets.QComboBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dateFromBox.sizePolicy().hasHeightForWidth())
        self.dateFromBox.setSizePolicy(sizePolicy)
        self.dateFromBox.setObjectName("dateFromBox")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.dateFromBox)
        self.verticalLayout.addLayout(self.formLayout_2)
        self.formLayout_3 = QtWidgets.QFormLayout()
        self.formLayout_3.setContentsMargins(6, 16, -1, -1)
        self.formLayout_3.setHorizontalSpacing(23)
        self.formLayout_3.setVerticalSpacing(6)
        self.formLayout_3.setObjectName("formLayout_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.dateEndBox = QtWidgets.QComboBox(Form)
        self.dateEndBox.setObjectName("dateEndBox")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.dateEndBox)
        self.verticalLayout.addLayout(self.formLayout_3)
        self.paymentView = QtWidgets.QListView(Form)
        self.paymentView.setObjectName("paymentView")
        self.verticalLayout.addWidget(self.paymentView)
        self.horizontalLayout.addLayout(self.verticalLayout)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_5.setText(_translate("Form", "Класс"))
        self.label.setText(_translate("Form", "ФИО"))
        self.label_2.setText(_translate("Form", "Услуга"))
        self.label_3.setText(_translate("Form", "Дата начало"))
        self.label_4.setText(_translate("Form", "Дата конец"))



class Main(QtWidgets.QMainWindow, Ui_Form):
    def __init__(self, parent=None):
        super(Main, self).__init__(parent)

        self.setupUi(self)

        self.createMenuBar()



    def createMenuBar(self):
        self.menuBar = QtWidgets.QMenuBar(self)
        self.setMenuBar(self.menuBar)

        fileMenu = QtWidgets.QMenu('&File', self)
        self.menuBar.addMenu(fileMenu)

        fileMenu.addAction('Open', self.action_open_clicked)
        fileMenu.addAction('Save', self.action_save_clicked)



    xl = None
    fname = None
    maps_name = {}
    all_sum = []

    @QtCore.pyqtSlot() #аннотация обработки нажатия в меню
    def action_open_clicked(self):
        self.fname = QtWidgets.QFileDialog.getOpenFileName(self, '', '', ('xlsx File(*.xlsx)'))[0]  # выбирать 1ый файл из всей выборки, если даже пользователь выберетм ного файлов /получаю путь до файла


        try:
            self.xl = pd.ExcelFile(self.fname)
            self.create_class_name_box()
            self.nameBox.clear()
            self.serviceBox.clear()
            self.dateFromBox.clear()
            self.dateEndBox.clear()
            self.maps_name.clear()
            self.all_sum.clear()

        except FileNotFoundError: #не открыл файл, или нажали отмену

            error = QtWidgets.QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText(
                'Вы выбрали не тот файл!')
            error.setIcon(QtWidgets.QMessageBox.Warning)
            error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

            error.setDetailedText('*.xlsx файл можно открыть, если у вас xls, конвертируйте её в xlsx, в интернете напишите ' +
                                  '"конвертировать xls в xlsx онлайн"')

            error.exec_()

    @QtCore.pyqtSlot()  # аннотация обработки нажатия в меню
    def action_save_clicked(self):
        try:
            # filename = inspect.getframeinfo(inspect.currentframe()).filename
            filename = os.getcwd()
            # self.fname = QtWidgets.QFileDialog.getOpenFileName()[0]  # выбирать 1ый файл из всей выборки, если даже пользователь выберетм ного файлов /получаю путь до файла
            # num = str(filename).rfind('\\')
            # filename = str(filename)[:num + 1]
            filename = filename + '\квитанция_шаблон.docx'
            document = Document(filename)
            new_doc = copy.deepcopy(document)
            table = document.tables[0]

            # # Эту штуку надо было в функцию выкинуть, было бы проще читаемо код
            # # Достаём то что было посчитано
            model_check = self.paymentView.model()
            names_view = []
            pay_view = []
            services = []
            services.append(self.serviceBox.currentText())

            check_any_service = str(services[0]).find('+')
            if (check_any_service == -1):
                for i in range(0, model_check.rowCount()):  # ListView что достали вытаскиваю
                    name_pay = str(model_check.item(i).text())

                    num = name_pay.find(')')
                    num1 = name_pay.find('nan')
                    num2 = name_pay.find(' - 0.0')
                    if num != -1 and num1 == -1 and num2 == -1:
                        name_pay = name_pay[int(num) + 1:]
                        num = name_pay.find(' - ')
                        name = name_pay[:num]
                        pay = name_pay[num + 3:]

                        names_view.append(name)  # достаём без "1)", но с Иванов Иван - 5000руб
                        pay_view.append(pay) # 5000ру

            else:
                print(services)
                name_keys = services.pop(0)
                name_keys = (list(self.maps_name.keys()))
                for i in range(0, len(self.maps_name)):
                    names_view.append(str(list(name_keys)[i]))

                    services.append(self.maps_name[list(name_keys)[i]].keys())



            # # len(new_doc.table) сколько таблиц
            # for i in range(1, len(names_view)):
            #     paragraph = new_doc.add_paragraph()   #копируем таблицы с шаблона квитанции. Сколько учеников выбрали столько таблиц
            #     new_tbl = copy.deepcopy(table._tbl)
            #     paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            #     paragraph._p.addnext(new_tbl)


            dateFrom = (self.dateFromBox.currentText())
            dateEnd = (self.dateEndBox.currentText())

            for i in range(0, len(names_view)):
                if i != 0:
                    paragraph = new_doc.add_paragraph()  # копируем таблицы с шаблона квитанции. Сколько учеников выбрали столько таблиц
                    new_tbl = copy.deepcopy(table._tbl)
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    paragraph._p.addnext(new_tbl)

                new_doc.tables[i].rows[4].cells[1].text = names_view[i]
                tmp_for_service = {}

                if (check_any_service == -1):
                    if str(pay_view[i]).replace('.', '', 1).isdigit():
                        if (float(pay_view[i]) != 0 or float(pay_view[i]) != 10):
                            a = 1
                            if (type(pay_view[i]) != type(1)):
                                pay = (str(pay_view[i]))
                                tochka = pay.find('.')
                                if tochka != -1:
                                    pay = pay[:tochka]
                                pay = int(pay)
                            else:
                                pay = pay_view[i]

                        else:
                            pay = 0
                    else:
                        pay = 0

                    tmp_for_service[services[0]] = str(pay)
                else:

                    for j in range(0, len(list(services[i]))):                             #Для многих услуг

                        if str(self.maps_name[names_view[i]][list(services[i])[j]]).replace('.','',1).isdigit():
                            if (float(self.maps_name[names_view[i]][list(services[i])[j]])) != 0 or float(self.maps_name[names_view[i]][list(services[i])[j]]) != 10:

                                a = 1
                                if (type(self.maps_name[names_view[i]][list(services[i])[j]]) != type(1)):
                                    pay = (str(self.maps_name[names_view[i]][list(services[i])[j]]))
                                    tochka = pay.find('.')
                                    if tochka != -1:
                                        pay = pay[:tochka]
                                    pay = int(pay)
                                else:
                                    pay = self.maps_name[names_view[i]][list(services[i])[j]]
                            else:
                                pay = 0
                        else:
                            pay = 0

                        tmp_for_service[str(list(services[i])[j])] = str(pay)


                # new_doc.tables[i].rows[4].cells[1].text = str(pay)
                # new_doc.tables[i].rows[12].cells[1].text = str(pay)
                keys = tmp_for_service.keys()
                len_key =  int(len(list(keys)))
                j = 0
                m = 0
                summer = 0
                while j < len_key:
                    if float(tmp_for_service[list(keys)[j]]) != 0:
                        new_doc.tables[i].rows[5+j - m].cells[0].text = str(list(keys)[j])
                        new_doc.tables[i].rows[5+j - m].cells[1].text = str(tmp_for_service[list(keys)[j]])
                        summer = summer + int(tmp_for_service[list(keys)[j]])
                        new_doc.tables[i].rows[5+j - m].cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        new_doc.tables[i].rows[5+j - m].cells[1].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
                    else:
                        m = m + 1
                    j = j + 1
                    count_rows = 0
                    for row in new_doc.tables[i].rows:
                        count_rows = count_rows + 1
                    if 5 + j - m == count_rows - 2:
                        new_doc.tables[i].add_row()

                        (new_doc.tables[i].rows[count_rows].cells[0].text) = (str(new_doc.tables[i].rows[count_rows - 1].cells[0].text))
                        (new_doc.tables[i].rows[count_rows].cells[1].text) = (str(new_doc.tables[i].rows[count_rows - 1].cells[1].text))
                        (new_doc.tables[i].rows[count_rows - 1].cells[0].text) = str(new_doc.tables[i].rows[count_rows - 2].cells[0].text)
                        (new_doc.tables[i].rows[count_rows - 1].cells[1].text) = str(new_doc.tables[i].rows[count_rows - 2].cells[1].text)
                        (new_doc.tables[i].rows[count_rows - 2].cells[0].text) = ''
                        (new_doc.tables[i].rows[count_rows - 2].cells[1].text) = ''
                        new_doc.tables[i].rows[count_rows].cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        new_doc.tables[i].rows[count_rows].cells[1].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
                        new_doc.tables[i].rows[count_rows - 1].cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        new_doc.tables[i].rows[count_rows - 1].cells[1].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT

                count_rows = 0
                for row in new_doc.tables[i].rows:
                    count_rows = count_rows + 1
                (new_doc.tables[i].rows[count_rows - 2].cells[1].text) = str(summer)
                new_doc.tables[i].rows[count_rows - 2].cells[1].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT

                if str(dateFrom) == str(dateEnd) or str(dateEnd) == '':
                    date = str(dateFrom)
                else:
                    date = str(dateFrom) + '-' + str(dateEnd)
                pay_date_str = new_doc.tables[i].rows[1].cells[0].text.strip()
                pay_date_str =str(pay_date_str).replace('XX.XX', date)
                new_doc.tables[i].rows[1].cells[0].text = str(pay_date_str)
                date_time_obj = datetime.datetime.now()
                if (int(date_time_obj.month)) == 12:
                    date = '10.' + str( 1) + '.' + str(int(date_time_obj.year) + 1)
                elif (int(date_time_obj.month)) < 9:
                    date = '05.0' + str(int(date_time_obj.month) + 1) + '.' + str(date_time_obj.year)
                else:
                    date = '05.' + str(int(date_time_obj.month) + 1) + '.' + str(date_time_obj.year)

                pay_date_str = new_doc.tables[i].rows[3].cells[0].text.strip()
                pay_date_str = str(pay_date_str).replace('XX.XX.XX', str(date))
                new_doc.tables[i].rows[3].cells[0].text = str(pay_date_str)
                new_doc.tables[i].rows[3].cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                new_doc.tables[i].rows[1].cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                new_doc.tables[i].rows[4].cells[1].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT #ИМЯ
                #не выгружать тех у кого не платил!
            num = self.fname.rfind('/')
            filename = self.fname[:num]
            new_doc.save(filename + '/Квитанция.docx')
        except:
            error = QtWidgets.QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText(
                'Не был выбран xls файл или Вы выбрали не пригодный файл. Для ознокомления какой файл вам нужен, можете посмотреть детали')
            error.setIcon(QtWidgets.QMessageBox.Warning)
            error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

            error.setDetailedText('Начиная с A1 и до последнего столпца не должны быть пропущенных столбов.\n ' +
                                  'Также в столбцe Б должны быть имена учащихся.\n' +
                                  ' В Столбцах А должны быть записи, если есть запись, то это учащийся, если записи нет, то это класс')

            error.exec_()

    def create_class_name_box(self):

        self.maps_name.clear()
        self.all_sum.clear()

        df1 = self.xl.parse(self.xl.sheet_names[0])  # название страницы, которое мы парсим

        model_class = QtGui.QStandardItemModel()
        self.classBox.setModel(model_class)

        keys = df1.keys()
        check = True
        for i in range(0, len(keys)):   # Поиск в ключай то, что не должно быть
            if str(keys[i]).find('Unnamed') != -1:
                check = False

        if check:

            for row in range(0, df1[keys[1]].size):
                pp = df1[keys[0]][row]
                name = df1[keys[1]][row]
                if (str(pp)) == 'nan':
                    item = QtGui.QStandardItem(str(name))
                    model_class.appendRow(item)
            item = QtGui.QStandardItem('Все')
            model_class.appendRow(item)
            self.classBox.view().pressed.connect(self.handleItemPressed_class_create_name) #index, потеряется, если ламдой пользоваться
            self.classBox.view().pressed.connect(self.handleItemPressed_class_service_show)
            # self.classBox.view().pressed.connect(lambda: self.handleItemPressed_class_service_show(self.xl)) теряется index, но приходится делать глобальную переменную
        else:

            error = QtWidgets.QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText(
                'Вы выбрали не пригодный файл. Для ознокомления какой файл вам нужен, можете посмотреть детали')
            error.setIcon(QtWidgets.QMessageBox.Warning)
            error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

            error.setDetailedText('Начиная с A1 и до последнего столпца не должны быть пропущенных столбов.\n ' +
                                  'Также в столбцe Б должны быть имена учащихся.\n' +
                                  ' В Столбцах А должны быть записи, если есть запись, то это учащийся, если записи нет, то это класс')

            error.exec_()

    def handleItemPressed_class_create_name(self, index):

        df1 = self.xl.parse(self.xl.sheet_names[0])  # название страницы, которое мы парсим

        model_name = QtGui.QStandardItemModel()
        self.nameView.setModel(model_name)
        self.nameBox.setModel(model_name)

        keys = df1.keys()

        pp = df1[keys[0]]
        name = df1[keys[1]]
        i = 0
        for row in range(0, pp.size):

            if str(pp[row]) == 'nan':
                if int(i) == int(index.row()):
                    row = row + 1
                    while (str(pp[row]) != 'nan' ):
                        item = QtGui.QStandardItem(str(int(pp[row])) + ')' + str(name[row]))
                        model_name.appendRow(item)
                        row = row + 1
                        if row == pp.size:
                            break

                i = int(i) + 1
        if model_name.item(0) == None:
            for row in range(0, df1[keys[1]].size):
                pp1 = pp[row]
                name1 = name[row]
                if str(name) != 'nan':
                    if str(pp1) != 'nan':
                        item = QtGui.QStandardItem(str(int(pp1)) + ')' + str(name1))
                    else:
                        item = QtGui.QStandardItem(str(name1))
                    model_name.appendRow(item)

        self.nameBox.view().pressed.connect(self.handleItemPressed_namebox)  # index, потеряется, если ламдой пользоваться

    def handleItemPressed_namebox(self, index):

        self.dateFromBox.clear()
        self.dateEndBox.clear()
        # Достаём то что было посчитано
        model_check = self.nameBox.model()
        model_pay = QtGui.QStandardItemModel()
        self.nameView.setModel(model_pay)
        name = str(model_check.item(index.row()).text())
        item = QtGui.QStandardItem(str(name))
        model_pay.appendRow(item)

    def handleItemPressed_class_service_show(self, index):

        self.maps_name.clear()
        self.all_sum.clear()
        self.dateFromBox.clear()
        self.dateEndBox.clear()

        model_service = QtGui.QStandardItemModel()
        self.serviceBox.setModel(model_service)
        all_service = ''
        for i in range(0, len(self.xl.sheet_names)):
            if i == 0:
                all_service = str(self.xl.sheet_names[i])
            else:
                all_service = all_service +  '+' + str(self.xl.sheet_names[i])
            item = QtGui.QStandardItem(self.xl.sheet_names[i])
            model_service.appendRow(item)
        item = QtGui.QStandardItem(all_service)
        model_service.appendRow(item)

        self.serviceBox.view().pressed.connect(self.handleItemPressed_service_create_date)


    def getMonth(self, month, year):
        date_string = ''
        if month == 1:
            date_string = 'Январь'
        elif month ==2:
            date_string = 'Февраль'
        elif month ==3:
            date_string = 'Март'
        elif month ==4:
            date_string = 'Апрель'
        elif month ==5:
            date_string = 'Май'
        elif month ==6:
            date_string = 'Июнь'
        elif month ==7:
            date_string = 'Июль'
        elif month ==8:
            date_string = 'Август'
        elif month ==9:
            date_string = 'Сентябрь'
        elif month ==10:
            date_string = 'Октябрь'
        elif month ==11:
            date_string = 'Ноябрь'
        elif month ==12:
            date_string = 'Декабрь'

        date_string = date_string + '.' + str(year)
        return date_string



    def handleItemPressed_service_create_date(self, index):
        self.dateEndBox.clear()
        model_pay = QtGui.QStandardItemModel()
        self.paymentView.setModel(model_pay)




        if (index.row() < len(self.xl.sheet_names)):
            df1 = self.xl.parse(self.xl.sheet_names[index.row()])  # название страницы, которое мы парсим
            # keys = []
            keys = df1.keys()
            check = True
            if len(keys) == 0:
                check = False
            else:
                for i in range(0, len(keys)):  # Поиск в ключай то, что не должно быть
                    if str(keys[i]).find('Unnamed') != -1:
                        check = False


            if check:
                model_data = QtGui.QStandardItemModel()
                self.dateFromBox.setModel(model_data)
                if index.row() == 0: #Если первая страница, то имена начинаются со 2ого
                    index_sheet = 1
                else:
                    index_sheet = 0
                names = df1[keys[index_sheet]]
                for i in range(index_sheet + 1, keys.size):
                    if type(keys[i]) == datetime.datetime:
                        date_string = str(self.getMonth(keys[i].month, keys[i].year))
                        item = QtGui.QStandardItem(date_string)
                        model_data.appendRow(item)
                    else:
                        item = QtGui.QStandardItem(str(keys[i]))
                        model_data.appendRow(item)
                #Достаём имена, снизу
                model_check = self.nameView.model()
                names_view=[]
                for i in range(0, model_check.rowCount()):
                    name = str(model_check.item(i).text())
                    num = name.find(')')
                    if num != -1:
                        name = name[int(num) + 1:]
                        names_view.append(name)
                index_for_service = []
                for i in range(0, len(names_view)):
                    for j in range(0, len(names)):
                        str_name1 = str(names_view[i]).lower().replace(' ', '')
                        str_name2 = str(names[j]).lower().replace(' ', '')
                        check = str_name1.find(str_name2)
                        if check != -1:
                            index_for_service.append(j)

                for i in range(0, len(index_for_service)):
                    # if str(names_view)
                    item = QtGui.QStandardItem(str(i + 1) + ')' + str(names[index_for_service[i]]) + ' ' + '-' + ' ' + str(df1[keys[index_sheet + 1]][index_for_service[i]]))
                    model_pay.appendRow(item)

                self.dateFromBox.view().disconnect()
                self.dateFromBox.view().pressed.connect(self.handleItemPressed_dataFrom_create_dateEnd)
            else:

                error = QtWidgets.QMessageBox()
                error.setWindowTitle("Ошибка")
                error.setText(
                    'Вы выбрали не пригодный файл, на странице ' + str(self.xl.sheet_names[index.row()]) + '. Для ознокомления какой файл вам нужен, можете посмотреть детали')
                error.setIcon(QtWidgets.QMessageBox.Warning)
                error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

                error.setDetailedText('Начиная с A1 и до последнего столпца не должны быть пропущенных столбов.\n ' +
                                      'Также в столбцe Б должны быть имена учащихся.\n' +
                                      ' В Столбцах А должны быть записи, если есть запись, то это учащийся, если записи нет, то это класс')

                error.exec_()

        else:
            self.dateEndBox.clear()
            df = []
            len_key = 0
            index_len_key = 0
            for i in range(0, len(self.xl.sheet_names)):
                df.append(self.xl.parse(self.xl.sheet_names[i]))
                keys = df[i].keys()
                check = True
                if len(keys) == 0:
                    check = False
                    break
                else:
                    for j in range(0, len(keys)):  # Поиск в ключай то, что не должно быть
                        if str(keys[j]).find('Unnamed') != -1:
                            check = False
                            break

                if (len_key < len(keys)):
                    len_key = len(keys)
                    index_len_key = i
            if check:

                model_data = QtGui.QStandardItemModel()
                self.dateFromBox.setModel(model_data)
                if index_len_key == 0: #Если первая страница, то имена начинаются со 2ого
                    index_sheet = 1
                else:
                    index_sheet = 0

                keys = df[index_len_key].keys()
                names = df[index_len_key][keys[index_sheet]]
                for i in range(index_sheet + 1, df[index_len_key].keys().size):
                    if type(keys[i]) == datetime.datetime:
                        date_string = str(self.getMonth(keys[i].month, keys[i].year))
                        item = QtGui.QStandardItem(date_string)
                        model_data.appendRow(item)
                    else:
                        item = QtGui.QStandardItem(str(keys[i]))
                        model_data.appendRow(item)
                self.dateFromBox.view().disconnect()
                self.dateFromBox.view().pressed.connect(self.handleItemPressed_dataFrom_all)

            else:
                error = QtWidgets.QMessageBox()
                error.setWindowTitle("Ошибка")
                error.setText(
                    'Вы выбрали не пригодный файл, на какой-то из страниц ошибка, не соответсвтуют параметрам. Для ознокомления какой файл вам нужен, можете посмотреть детали')
                error.setIcon(QtWidgets.QMessageBox.Warning)
                error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

                error.setDetailedText('Начиная с A1 и до последнего столпца не должны быть пропущенных столбов.\n ' +
                                      'Также в столбцe Б должны быть имена учащихся.\n' +
                                      ' В Столбцах А должны быть записи, если есть запись, то это учащийся, если записи нет, то это класс')

                error.exec_()
            #asdasd



    def handleItemPressed_dataFrom_all(self, index):
        df = []
        self.maps_name.clear()
        self.all_sum.clear()
        for i in range(0, len(self.xl.sheet_names)):
            df.append(self.xl.parse(self.xl.sheet_names[i]))
        model_check = self.dateFromBox.model()
        date_string = model_check.item(index.row()).text()
        # all_sum = []
        # maps_name = {}
        model_check = self.nameView.model()
        names_view = []
        for j in range(0, model_check.rowCount()):
            name = str(model_check.item(j).text())
            num = name.find(')')
            if num != -1:
                name = name[int(num) + 1:]
                names_view.append(name)
                self.all_sum.append(0)
        for i in range(0, len(df)):

            keys = df[i].keys()
            key_index = self.find_date_other_sheet(keys, date_string)

            if key_index == -2:

                error = QtWidgets.QMessageBox()
                error.setWindowTitle("Ошибка")
                error.setText(
                    'Вы выбрали не пригодный файл, на какой то странице ошибка, не соответсвтуют параметрам. Для ознокомления какой файл вам нужен, можете посмотреть детали')
                error.setIcon(QtWidgets.QMessageBox.Warning)
                error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

                error.setDetailedText('Дата введенно не корректно, год должен быть вида ХХ или ХХХХ')

                error.exec_()
            elif key_index == -1:

                error = QtWidgets.QMessageBox()
                error.setWindowTitle("Ошибка")
                error.setText(
                    'Вы выбрали не пригодный файл, на странице '+self.xl.sheet_names[i] +'. Для ознокомления какой файл вам нужен, можете посмотреть детали')
                error.setIcon(QtWidgets.QMessageBox.Warning)
                error.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)

                error.setDetailedText('Дата введенно не корректно, год должен быть вида ХХ или ХХХХ')

                error.exec_()
            elif key_index == 0:
                pass
            else:

                if i == 0:
                    index_sheet = 1
                else:
                    index_sheet = 0
                names = df[i][keys[index_sheet]]
                key = keys[key_index]


                for k in range(0, len(names_view)):
                    str_name1 = str(names_view[k]).lower().replace(' ', '')
                    for j in range(0, len(names)):
                        str_name2 = str(names[j]).lower().replace(' ', '')
                        check = str_name1.find(str_name2)
                        if check != -1:
                            if (self.maps_name.get(names_view[k]) != None):
                                tmp = self.maps_name.pop(names_view[k])
                                tmp[self.xl.sheet_names[i]] = df[i][key][j]
                                self.maps_name[names_view[k]] = tmp
                            else:
                                self.maps_name[names_view[k]] = {self.xl.sheet_names[i] : df[i][key][j]}

                            if (str(df[i][key][j]) == 'nan'):
                                pass
                            else:
                                if (str(df[i][key][j]).isdigit()):
                                    self.all_sum[k] = float(self.all_sum[k]) + float(df[i][key][j] )
                                else:
                                    pass


        model_data = QtGui.QStandardItemModel()
        self.paymentView.setModel(model_data)
        for i in range(0, len(self.maps_name)):
            names = self.maps_name.keys()
            services = self.maps_name[list(names)[i]].keys()
            str_name1 = str(list(names)[i])
            for j in range(0, len(services)):
                str_name1 = str_name1 + ' - ' + str(list(services)[j]) + ' : ' + str(self.maps_name[list(names)[i]][list(services)[j]])


            item = QtGui.QStandardItem(str(i + 1) + ')' + str_name1)
            model_data.appendRow(item)


    def find_date_other_sheet(self, keys, date_string):

        date_string = date_string.replace(' ', '')
        date_string = date_string.replace('.', '')
        num_string1 = ''
        for j in range(0, len(date_string)):
            if date_string[j].isdigit():
                num_string1 += date_string[j]

        if len(num_string1) == 2:
            date_string = date_string[0:len(date_string) - 2]
            num_string1 = '20' + num_string1
        elif len(num_string1) == 4:
            date_string = date_string[0:len(date_string) - 4]
        else:
            return -2


        for i in range(1, len(keys)):
            # key = str(keys[i])
            if type(keys[i]) == datetime.datetime:
                key = str(self.getMonth(keys[i].month, keys[i].year))
            else:
                key = str(keys[i])
            key = key.replace(' ','')
            key = key.replace('.','')
            num_string = ''
            for j in range(0, len(key)):
                if key[j].isdigit():
                    num_string += key[j]


            if len(num_string) == 2:
                key = key[0:len(key) - 2]
                num_string = '20' + num_string
            elif len(num_string) == 4:
                key = key[0:len(key) - 4]
            elif len(num_string) == 0:
                pass
            else:
                return -1
                break
            if key.lower() == date_string.lower() and num_string == num_string1:
                return i
                break
        return 0



    def handleItemPressed_dataFrom_create_dateEnd(self, index):

        # он соединился с фромблок

        number_sheet = self.serviceBox.currentIndex()
        model_data = QtGui.QStandardItemModel()
        self.dateEndBox.setModel(model_data)


        df1 = self.xl.parse(self.xl.sheet_names[number_sheet])

        keys = df1.keys()

        if number_sheet == 0:  # Если первая страница, то имена начинаются со 2ого
            index_sheet = 1
            for i in range(index.row() + 2, len(keys)): #dataEndBox

                if type(keys[i]) == datetime.datetime:
                    date_string = str(self.getMonth(keys[i].month, keys[i].year))
                    item = QtGui.QStandardItem(date_string)
                    model_data.appendRow(item)
                else:
                    item = QtGui.QStandardItem(str(keys[i]))
                    model_data.appendRow(item)
        else:
            index_sheet = 0
            for i in range(index.row() + 1, len(keys)): #dataEndBox
                if type(keys[i]) == datetime.datetime:
                    date_string = str(self.getMonth(keys[i].month, keys[i].year))
                    item = QtGui.QStandardItem(date_string)
                    model_data.appendRow(item)
                else:
                    item = QtGui.QStandardItem(str(keys[i]))
                    model_data.appendRow(item)

        #Достаём то что было посчитано
        model_check = self.paymentView.model()
        model_pay = QtGui.QStandardItemModel()
        self.paymentView.setModel(model_pay)
        names_view = []
        for i in range(0, model_check.rowCount()):  #ListView что достали вытаскиваю
            name = str(model_check.item(i).text())
            num = name.find(')')
            if num != -1:
                name = name[int(num) + 1:]
                names_view.append(name)  # достаём без "1)", но с Иванов Иван 5000руб

        names = df1[keys[index_sheet]]   #names for pandas

        index_for_service = []

        for i in range(0, len(names_view)):
            str_name2 = str(names_view[i]).lower().replace(' ', '') # ивановиван5000руб
            for j in range(0, len(names)):
                str_name1 = str(names[j]).lower().replace(' ', '')  # ивановиван
                check = str_name2.find(str_name1)
                if check != -1:
                    index_for_service.append(j)

        for i in range(0, len(index_for_service)):
            item = QtGui.QStandardItem(str(i + 1) + ')' + str(names[index_for_service[i]]) + ' ' + '-' + ' ' + str(
                df1[keys[index.row() + index_sheet + 1]][index_for_service[i]]))
            model_pay.appendRow(item)


        self.dateEndBox.view().pressed.connect(self.handleItemPressed_dateEnd)

    def handleItemPressed_dateEnd(self, index):

        number_sheet = self.serviceBox.currentIndex()

        df1 = self.xl.parse(self.xl.sheet_names[number_sheet])
        keys = df1.keys()
        index_sheet_from = self.dateFromBox.currentIndex()
        index_sheet_end = index.row()
        if number_sheet == 0:
            index_sheet_from = index_sheet_from + 2
            index_sheet = 1
        else:
            index_sheet_from = index_sheet_from + 1
            index_sheet = 0


        index_sheet_end = index_sheet_from + index_sheet_end

        #dateView получить
        model_check = self.paymentView.model()

        model_pay = QtGui.QStandardItemModel()
        self.paymentView.setModel(model_pay)
        names_view = []
        for i in range(0, model_check.rowCount()):  # ListView что достали вытаскиваю
            name = str(model_check.item(i).text())
            num = name.find(')')
            if num != -1:
                name = name[int(num) + 1:]
                names_view.append(name)

        #Получать имена из dataFrame
        names = df1[keys[index_sheet]]


        #разсчёт

        index_for_service = []

        for i in range(0, len(names_view)):
            str_name2 = str(names_view[i]).lower().replace(' ', '')
            for j in range(0, len(names)):
                str_name1 = str(names[j]).lower().replace(' ', '')
                check = str_name2.find(str_name1)
                if check != -1:
                    index_for_service.append(j)  #ндексы детей, которых мы выбрали


        sum_pay = 0
        for i in range(0, len(index_for_service)):
            # sum_pay = 0
            for j in range(index_sheet_from, index_sheet_end + 1):
                if str(df1[keys[j]][index_for_service[i]]) == 'nan' :
                    sum_pay = float(sum_pay) + 0
                elif str((df1[keys[j]][index_for_service[i]])).replace('.','',1).isdigit():
                    sum_pay = float(sum_pay) + float(str(df1[keys[j]][index_for_service[i]]))
            item = QtGui.QStandardItem(str(i + 1) + ')' + str(names[index_for_service[i]]) + ' ' + '-' + ' ' + str(sum_pay))
            model_pay.appendRow(item)
            sum_pay = 0


    def resizeEvent(self, event):

        self.horizontalLayout.setGeometry(QtCore.QRect(0, 0, self.width(), self.height()))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Rename = Main()
    Rename.show()
    sys.exit(app.exec_()) # ЛИБО PANDAS ЛИБО OPENPYXL ==== ОБА


